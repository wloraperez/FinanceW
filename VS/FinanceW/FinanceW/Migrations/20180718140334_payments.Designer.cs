// <auto-generated />
using FinanceW.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace FinanceW.Migrations
{
    [DbContext(typeof(FinanceWContext))]
    [Migration("20180718140334_payments")]
    partial class payments
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FinanceW.Models.Bank", b =>
                {
                    b.Property<int>("BankId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Country");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<int>("StatusBank");

                    b.HasKey("BankId");

                    b.ToTable("Bank");
                });

            modelBuilder.Entity("FinanceW.Models.CashIncome", b =>
                {
                    b.Property<int>("CashIncomeId")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int?>("CreditCardCutId");

                    b.Property<string>("Description");

                    b.Property<DateTime>("IncomeDate");

                    b.Property<int?>("ProductId");

                    b.Property<int>("StatusIncome");

                    b.HasKey("CashIncomeId");

                    b.HasIndex("CreditCardCutId");

                    b.HasIndex("ProductId");

                    b.ToTable("CashIncome");
                });

            modelBuilder.Entity("FinanceW.Models.CashOutcome", b =>
                {
                    b.Property<int>("CashOutcomeId")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<DateTime>("OutcomeDate");

                    b.Property<int>("ProductId");

                    b.Property<int>("StatusOutcome");

                    b.HasKey("CashOutcomeId");

                    b.HasIndex("ProductId");

                    b.ToTable("CashOutcome");
                });

            modelBuilder.Entity("FinanceW.Models.CreditCardCut", b =>
                {
                    b.Property<int>("CreditCardCutId")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("AmountCut");

                    b.Property<decimal>("AmountPayment");

                    b.Property<decimal>("AmountPending");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("PayDayCut");

                    b.Property<DateTime>("PayDayLimit");

                    b.Property<int>("ProductId");

                    b.HasKey("CreditCardCutId");

                    b.HasIndex("ProductId");

                    b.ToTable("CreditCardCut");
                });

            modelBuilder.Entity("FinanceW.Models.Currency", b =>
                {
                    b.Property<int>("CurrencyId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<int>("StatusCurrency");

                    b.HasKey("CurrencyId");

                    b.ToTable("Currency");
                });

            modelBuilder.Entity("FinanceW.Models.CurrencyConvert", b =>
                {
                    b.Property<int>("CurrencyConvertId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CurrencyFromCurrencyId");

                    b.Property<int>("CurrencyToCurrencyId");

                    b.Property<DateTime>("DateValidFrom");

                    b.Property<DateTime>("DateValidTo");

                    b.Property<decimal>("Multiple");

                    b.Property<int>("StatusCurrency");

                    b.HasKey("CurrencyConvertId");

                    b.HasIndex("CurrencyFromCurrencyId");

                    b.HasIndex("CurrencyToCurrencyId");

                    b.ToTable("CurrencyConvert");
                });

            modelBuilder.Entity("FinanceW.Models.Expense", b =>
                {
                    b.Property<int>("ExpenseId")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("CurrencyId");

                    b.Property<DateTime>("CutDay");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<int>("ExpenseTypeId");

                    b.Property<int>("PayDayLimit");

                    b.Property<int>("StatusExpense");

                    b.Property<string>("UserId");

                    b.HasKey("ExpenseId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("Expense");
                });

            modelBuilder.Entity("FinanceW.Models.PayExpense", b =>
                {
                    b.Property<int>("PayExpenseId")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<int>("ExpenseId");

                    b.Property<DateTime>("PayExpenseDate");

                    b.Property<int>("ProductId");

                    b.Property<int>("StatusPayExpense");

                    b.Property<decimal>("Tax");

                    b.HasKey("PayExpenseId");

                    b.HasIndex("ExpenseId");

                    b.HasIndex("ProductId");

                    b.ToTable("PayExpense");
                });

            modelBuilder.Entity("FinanceW.Models.PaymentReminder", b =>
                {
                    b.Property<int>("PaymentReminderId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("EndDate");

                    b.Property<TimeSpan>("EndTime");

                    b.Property<int?>("ExpenseId");

                    b.Property<int?>("ProductId");

                    b.Property<int>("ReminderTypeId");

                    b.Property<DateTime>("StartDate");

                    b.Property<TimeSpan>("StartTime");

                    b.Property<int>("StatusPaymentReminder");

                    b.HasKey("PaymentReminderId");

                    b.HasIndex("ExpenseId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ReminderTypeId");

                    b.ToTable("PaymentReminder");
                });

            modelBuilder.Entity("FinanceW.Models.PayProduct", b =>
                {
                    b.Property<int>("PayProductId")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int?>("CreditCardCutId");

                    b.Property<string>("Description");

                    b.Property<DateTime>("PayProductDate");

                    b.Property<int>("ProductIdFrom");

                    b.Property<int>("ProductIdTo");

                    b.Property<int>("StatusPayProduct");

                    b.Property<decimal>("Tax");

                    b.HasKey("PayProductId");

                    b.HasIndex("CreditCardCutId");

                    b.HasIndex("ProductIdFrom");

                    b.HasIndex("ProductIdTo");

                    b.ToTable("PayProduct");
                });

            modelBuilder.Entity("FinanceW.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Alias")
                        .IsRequired();

                    b.Property<decimal>("Balance");

                    b.Property<int>("BankId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("CurrencyId");

                    b.Property<DateTime>("CutDay");

                    b.Property<int>("DaysToPayCut");

                    b.Property<string>("Number")
                        .IsRequired();

                    b.Property<DateTime>("OpeningDate");

                    b.Property<int>("ProductTypeId");

                    b.Property<int>("StatusProduct");

                    b.Property<decimal>("TotalAmount");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("UserId");

                    b.HasKey("ProductId");

                    b.HasIndex("BankId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("FinanceW.Models.ReminderType", b =>
                {
                    b.Property<int>("ReminderTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<int>("RecurrenceDay");

                    b.Property<int>("RecurrenceHour");

                    b.Property<int>("RecurrenceMonth");

                    b.Property<int>("RecurrenceYear");

                    b.HasKey("ReminderTypeId");

                    b.ToTable("ReminderType");
                });

            modelBuilder.Entity("FinanceW.Models.CashIncome", b =>
                {
                    b.HasOne("FinanceW.Models.CreditCardCut")
                        .WithMany("CashIncome")
                        .HasForeignKey("CreditCardCutId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FinanceW.Models.Product", "Product")
                        .WithMany("CashIncome")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FinanceW.Models.CashOutcome", b =>
                {
                    b.HasOne("FinanceW.Models.Product", "Product")
                        .WithMany("CashOutcome")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FinanceW.Models.CreditCardCut", b =>
                {
                    b.HasOne("FinanceW.Models.Product", "Product")
                        .WithMany("CreditCardCut")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FinanceW.Models.CurrencyConvert", b =>
                {
                    b.HasOne("FinanceW.Models.Currency", "CurrencyFrom")
                        .WithMany("CurrencyConvertFrom")
                        .HasForeignKey("CurrencyFromCurrencyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FinanceW.Models.Currency", "CurrencyTo")
                        .WithMany("CurrencyConvertTo")
                        .HasForeignKey("CurrencyToCurrencyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FinanceW.Models.Expense", b =>
                {
                    b.HasOne("FinanceW.Models.Currency", "currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FinanceW.Models.PayExpense", b =>
                {
                    b.HasOne("FinanceW.Models.Expense", "Expense")
                        .WithMany()
                        .HasForeignKey("ExpenseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FinanceW.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FinanceW.Models.PaymentReminder", b =>
                {
                    b.HasOne("FinanceW.Models.Expense", "Expense")
                        .WithMany("PaymentReminder")
                        .HasForeignKey("ExpenseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FinanceW.Models.Product", "Product")
                        .WithMany("PaymentReminder")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FinanceW.Models.ReminderType", "ReminderType")
                        .WithMany("PaymentReminder")
                        .HasForeignKey("ReminderTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FinanceW.Models.PayProduct", b =>
                {
                    b.HasOne("FinanceW.Models.CreditCardCut", "CreditCardCut")
                        .WithMany()
                        .HasForeignKey("CreditCardCutId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FinanceW.Models.Product", "ProductFrom")
                        .WithMany()
                        .HasForeignKey("ProductIdFrom")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FinanceW.Models.Product", "ProductTo")
                        .WithMany()
                        .HasForeignKey("ProductIdTo")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FinanceW.Models.Product", b =>
                {
                    b.HasOne("FinanceW.Models.Bank", "bank")
                        .WithMany("Product")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FinanceW.Models.Currency", "currency")
                        .WithMany("Product")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
